# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build:

    runs-on:  ubuntu-20.04
    env:
      OPENAI_API_KEY: ${{ secrets.OPENAI_SECRET_KEY }}
      
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.10.2
      uses: actions/setup-python@v3
      with:
        python-version: "3.11"
    - name: Get pip cache dir
      run: echo "PIP_CACHE_DIR=$(pip cache dir)" >> $GITHUB_ENV
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ${{ env.PIP_CACHE_DIR }}
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}-v2
        restore-keys: |
          ${{ runner.os }}-pip-
    - name: Prepare to install dependencies
      run: |
        wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/cuda-ubuntu2004.pin
        sudo mv cuda-ubuntu2004.pin /etc/apt/preferences.d/cuda-repository-pin-600
        sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys A4B469963BF863CC
        sudo add-apt-repository "deb https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/ /"
        sudo apt-get update
    - name: Install / Cache APT Packages
      uses: awalsh128/cache-apt-pkgs-action@staging
      with:
        packages: portaudio19-dev python3-pyaudio ffmpeg libcudnn8 firefox-geckodriver firefox zip
    - name: Install Pip dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest selenium flask flask-cors
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: SSH into EC2 and deploy
      run: |
        echo "${{ secrets.CGPT_SERVER_KEY }}" > private-key.pem
        chmod 600 private-key.pem
        ssh -o StrictHostKeyChecking=no -i private-key.pem ubuntu@ec2-13-59-92-214.us-east-2.compute.amazonaws.com "cd converseGPT && git pull -f && sudo systemctl restart cgpt"
    - name: Test with pytest
      run: |
        cd tst
        pytest
    # - name: Configure AWS Credentials
    #   uses: aws-actions/configure-aws-credentials@v1
    #   with:
    #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
    #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    #     aws-region: us-east-2 
    # - name: zip and upload to s3
    #   run: |
    #     zip -r app_bundle.zip src/
    #     aws s3 cp app_bundle.zip s3://cgpt-src/app_bundle.zip
    
    # EBS Feels overkill for this project
    # - name: Crate new EBS app version
    #   run: |
    #     aws elasticbeanstalk create-application-version --application-name converseGPT --version-label $GITHUB_SHA --source-bundle S3Bucket="cgpt-src",S3Key="app_bundle.zip"
    # - name: Update EBS to new version
    #   run: |
    #     aws elasticbeanstalk update-environment --environment-name cgpt-env --version-label $GITHUB_SHA