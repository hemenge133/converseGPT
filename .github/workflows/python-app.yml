# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build:

    runs-on:  ubuntu-20.04
    env:
      OPENAI_API_KEY: ${{ secrets.OPENAI_SECRET_KEY }}
      
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.10.2
      uses: actions/setup-python@v3
      with:
        python-version: "3.11"
    - name: Get pip cache dir
      run: echo "PIP_CACHE_DIR=$(pip cache dir)" >> $GITHUB_ENV
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ${{ env.PIP_CACHE_DIR }}
        key: ${{ runner.os }}-pip-${{ hashFiles('**/serve_requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    - name: Prepare to install dependencies
      run: |
        sudo apt-get update
        sudo apt-get upgrade
    - name: Install / Cache APT Packages
      uses: awalsh128/cache-apt-pkgs-action@v1.3.0
      with:
        packages: redis-server
    - name: Install Pip dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest flask flask-session redis
        if [ -f serve_requirements.txt ]; then pip install -r serve_requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: SSH into EC2 and deploy
      run: |
        eval $(ssh-agent -s)
        ssh-add <(echo "${{ secrets.CGPT_SERVER_KEY }}")
        ssh -A -o StrictHostKeyChecking=no ec2-user@${{ secrets.BASTION_HOST_IP }} "ssh backend && cd /home/ubuntu/converseGPT && git pull -f && sudo systemctl restart cgpt"
    - name: Test with pytest
      continue-on-error: true
      run: |
        cd tst
        pytest
    - name: Tag Commit successful if tests pass
      if: ${{ success() }}
      run: |
        eval $(ssh-agent -s)
        ssh-add <(echo "${{ secrets.CGPT_SERVER_KEY }}")
        ssh -A -o StrictHostKeyChecking=no ec2-user@${{ secrets.BASTION_HOST_IP }} "ssh backend && cd /home/ubuntu/converseGPT && git tag -f last-successful-deployment ${{ github.sha }} && git push --tags -f"
    - name: Rollback if tests fail
      if: ${{ failure() }}
      run: |
        eval $(ssh-agent -s)
        ssh-add <(echo "${{ secrets.CGPT_SERVER_KEY }}")
        ssh -A -o  StrictHostKeyChecking=no  ec2-user@${{ secrets.BASTION_HOST_IP }} "ssh backend && cd /home/ubuntu/converseGPT && git reset --hard last-successful-deployment && sudo systemctl restart cgpt"
        exit 1 # Fail workflow
